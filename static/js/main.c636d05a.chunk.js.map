{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","robot","key","SearchBox","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","searchfield","target","value","fetch","response","json","users","this","filteredRobots","filter","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c636d05a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => { // use ES6 destructuring of props to clean up code\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow tc bw2 shadow-5'>\r\n            <img alt='robot' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n//render the CardList, passing the destructured prop \"robots\"\r\nconst CardList = ({ robots }) => {\r\n    \r\n    return (\r\n        <div>\r\n            {\r\n                // render a Card Component for each robot in the array from robot.js\r\n                robots.map(robot => {\r\n                    return (\r\n                        <Card // the card props are pulled from the robot prop which was passed to CardList\r\n                            key={robot.id}\r\n                            id={robot.id}\r\n                            name={robot.name}\r\n                            email={robot.email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n// destructuring allows us to grab the props object and get its properties\r\n// what exactly are we destructuring here? is searchChange an object?\r\n// the thing that we passed from App as the prop was a method that set the state\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className=''\r\n                type=\"search\"\r\n                placeholder=\"search robots\"\r\n                onChange={searchChange}\r\n                // onChange is a regular HTML attribute; fires when value of input changes\r\n                // {searchChange} is a JS expression (state/prop) passed from App component\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n// import Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n\r\n// PROPS - variables passed to a react component by its parent\r\n// STATE - variables that are directly initialized and managed by the component\r\n\r\n// a parent feeds STATE into a child component\r\n// once the child component receives the state, the STATE becomes a PROP\r\n// the child cannot change the PROP\r\n// STATE is something that can change and affect the app\r\n// STATE usually lives in the parent component and is passed to childrens\r\n\r\n\r\n// we must use class syntax if our component has state\r\nclass App extends Component {\r\n\r\n    // in order to give our parent App component a state,\r\n    // we make a constructor, call super() (to inherit Component constructor)\r\n    constructor() {\r\n        super();\r\n\r\n        // and then define this.state as an object\r\n        // these are our App component states\r\n        // these states are passed down as props to the children in render\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users }))\r\n    }\r\n\r\n    // this is a function for setting state\r\n    // we pass this to SearchBox as a prop\r\n    onSearchChange = event => {\r\n        this.setState({ searchfield: event.target.value });\r\n    }\r\n\r\n\r\n\r\n    // the children components (SearchBox, CardList) are pure components (only have props, no state)\r\n    // their only job is to render\r\n    render() {\r\n        // destructure the state object of App\r\n        // so we dont have to always write this.state.<prop>\r\n        const { robots, searchfield } = this.state;\r\n\r\n        // App is managing its own state here\r\n        // it is the only thing that can change it's own state\r\n        // why cant I put this outside of render?\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        });\r\n\r\n        return !robots.length ?\r\n            <h1>Loading...</h1> :\r\n            (\r\n            // but it can pass its state down as props to its children here\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    {\r\n                        /*We pass App's onSearchChange method to SearchBox's\r\n                          searchChange prop as a it's value.\r\n                          in SearchBox, there is an <input> with an onChange attribute\r\n                          to which we assign the onSearchChange prop passed in from App\r\n                          ?so whenever there is change to input in searchBox\r\n                          ?onSearchChange is fired and App.setState gets assigned the\r\n                          ?value of the event, which is the text in the input?\r\n                        */\r\n                    }\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    \r\n                    {\r\n                        // scroll is just a div styled with scroll-y component\r\n                        // inside the div it renders Cardlist\r\n                    }\r\n                    {/* <Scroll> */}\r\n                        <CardList robots={filteredRobots} />\r\n                    {/* </Scroll> */}\r\n                </div>\r\n            )\r\n    }\r\n}\r\n    \r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App'\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.register();\n"],"sourceRoot":""}